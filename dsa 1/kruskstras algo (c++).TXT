#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

class Graph {
public:
    int numVertices;
    vector<Edge> edges;

    Graph(int vertices) : numVertices(vertices) {}

    // Function to add an edge to the graph
    void addEdge(int src, int dest, int weight) {
        Edge edge = {src, dest, weight};
        edges.push_back(edge);
    }

    // Function to find the parent of a vertex in a set
    int findParent(vector<int>& parent, int vertex) {
        if (parent[vertex] == -1)
            return vertex;
        return findParent(parent, parent[vertex]);
    }

    // Function to perform union of two sets
    void unionSets(vector<int>& parent, int x, int y) {
        int rootX = findParent(parent, x);
        int rootY = findParent(parent, y);
        parent[rootX] = rootY;
    }

    // Kruskal's algorithm to find the minimum spanning tree
    void kruskalsAlgorithm() {
        // Sort edges based on their weights
        sort(edges.begin(), edges.end(), [](const Edge& a, const Edge& b) {
            return a.weight < b.weight;
        });

        // Initialize parent array for union-find
        vector<int> parent(numVertices, -1);

        // Vector to store edges of the minimum spanning tree
        vector<Edge> mstEdges;

        for (const Edge& edge : edges) {
            int rootSrc = findParent(parent, edge.src);
            int rootDest = findParent(parent, edge.dest);

            // If including this edge doesn't form a cycle, add it to the minimum spanning tree
            if (rootSrc != rootDest) {
                mstEdges.push_back(edge);
                unionSets(parent, rootSrc, rootDest);
            }
        }

        // Display the minimum spanning tree
        cout << "Minimum Spanning Tree (Kruskal's Algorithm):" << endl;
        for (const Edge& edge : mstEdges) {
            cout << edge.src << " -- " << edge.dest << " : " << edge.weight << endl;
        }
    }
};

int main() {
    // Create a graph of the college campus
    Graph campusGraph(6);  // Assuming 6 departments or institutes

    // Add edges to the graph (representing distances between departments)
    campusGraph.addEdge(0, 1, 2);  // Example edge: Department 0 to Department 1 with distance 2
    campusGraph.addEdge(0, 2, 4);
    campusGraph.addEdge(1, 2, 1);
    campusGraph.addEdge(1, 3, 7);
    campusGraph.addEdge(2, 4, 3);
    campusGraph.addEdge(3, 4, 1);
    campusGraph.addEdge(3, 5, 5);
    campusGraph.addEdge(4, 5, 6);

    // Find and display the minimum spanning tree using Kruskal's algorithm
    campusGraph.kruskalsAlgorithm();

    return 0;
}
